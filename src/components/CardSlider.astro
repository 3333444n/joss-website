---
interface Image {
  src: string;
  alt: string;
}

interface Props {
  images: Image[];
}

const { images } = Astro.props;
---

<section class="w-full py-12 md:py-20 bg-primary-0">
  <div class="max-w-6xl mx-auto px-4">
    <div class="relative h-96 flex items-center justify-center">
      <!-- Card Stack Container -->
      <div class="relative w-80 h-80">
        {
          images.map((image, index) => {
            const isActive = index === 0;
            const distance = Math.abs(index - 0);
            const zIndex = images.length - distance;
            const offsetX = index * 80;

            // Scale based on distance from active card
            let scale = 1;
            if (distance === 0)
              scale = 1; // Active card - full size
            else if (distance === 1)
              scale = 0.85; // Adjacent cards
            else if (distance === 2)
              scale = 0.7; // Second level cards
            else scale = 0.55; // Further cards

            return (
              <div
                class={`absolute top-0 left-0 transition-all duration-500 ease-out cursor-pointer ${
                  isActive ? "z-50" : ""
                }`}
                style={`
                z-index: ${zIndex};
                transform: translateX(${offsetX}px) scale(${scale});
                width: 320px;
                height: 400px;
              `}
                data-card
              >
                <img
                  src={image.src}
                  alt={image.alt}
                  class="w-full h-full object-cover rounded-xl shadow-xl block"
                />
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const cards = document.querySelectorAll<HTMLElement>("[data-card]");
    const container = document.querySelector(
      ".relative.w-80.h-80"
    ) as HTMLElement;
    let currentIndex = 0;
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    let dragOffset = 0;

    function updateSlider(newIndex: number, dragProgress: number = 0): void {
      // Clamp the index to valid range
      newIndex = Math.max(0, Math.min(cards.length - 1, newIndex));

      // Update cards
      cards.forEach((card, index) => {
        // Calculate position with drag interpolation
        let effectiveIndex = newIndex + dragProgress;
        const distance = Math.abs(index - effectiveIndex);
        const offsetX = (index - effectiveIndex) * 80;
        const zIndex =
          cards.length - Math.abs(index - Math.round(effectiveIndex));

        // Scale and blur based on distance from active card
        let scale = 1;
        let blur = 0;

        if (distance < 0.5) {
          scale = 1.15; // Active card - bigger than before
          blur = 0; // No blur for active card
        } else if (distance < 1.5) {
          // Interpolate scale for cards transitioning
          const t = distance - 0.5;
          scale = 1.15 - t * 0.3; // 1.15 to 0.85
          blur = t * 3; // 0 to 3px blur
        } else if (distance < 2.5) {
          const t = distance - 1.5;
          scale = 0.85 - t * 0.15; // 0.85 to 0.7
          blur = 3 + t * 2; // 3 to 5px blur
        } else {
          scale = 0.55; // Further cards
          blur = 5; // Maximum blur
        }

        card.style.transform = `translateX(${offsetX}px) scale(${scale})`;
        card.style.filter = `blur(${blur}px)`;
        card.style.zIndex = zIndex.toString();

        if (Math.abs(index - effectiveIndex) < 0.5) {
          card.classList.add("z-50");
        } else {
          card.classList.remove("z-50");
        }
      });

      if (dragProgress === 0) {
        currentIndex = newIndex;
      }
    }

    function handleStart(clientX: number): void {
      isDragging = true;
      startX = clientX;
      currentX = clientX;
      dragOffset = 0;

      // Add dragging class to disable transitions during drag
      cards.forEach((card) => {
        card.style.transition = "none";
      });
    }

    function handleMove(clientX: number): void {
      if (!isDragging) return;

      currentX = clientX;
      dragOffset = currentX - startX;

      // Convert drag offset to progress (-1 to 1 range)
      const dragProgress = -dragOffset / 80; // Negative because left drag should go to next

      // Update cards with drag progress
      updateSlider(currentIndex, dragProgress);
    }

    function handleEnd(): void {
      if (!isDragging) return;

      isDragging = false;

      // Re-enable transitions
      cards.forEach((card) => {
        card.style.transition = "";
      });

      // Determine if we should slide to next/prev card
      const dragThreshold = 50; // pixels
      let newIndex = currentIndex;

      if (dragOffset > dragThreshold && currentIndex > 0) {
        // Dragged right, go to previous card
        newIndex = currentIndex - 1;
      } else if (
        dragOffset < -dragThreshold &&
        currentIndex < cards.length - 1
      ) {
        // Dragged left, go to next card
        newIndex = currentIndex + 1;
      }

      // Snap to the determined card
      updateSlider(newIndex);
      dragOffset = 0;
    }

    // Mouse events
    container?.addEventListener("mousedown", (e) => {
      e.preventDefault();
      handleStart(e.clientX);
    });

    document.addEventListener("mousemove", (e) => {
      handleMove(e.clientX);
    });

    document.addEventListener("mouseup", () => {
      handleEnd();
    });

    // Touch events
    container?.addEventListener("touchstart", (e) => {
      handleStart(e.touches[0].clientX);
    });

    container?.addEventListener("touchmove", (e) => {
      e.preventDefault();
      handleMove(e.touches[0].clientX);
    });

    container?.addEventListener("touchend", () => {
      handleEnd();
    });

    // Add click handlers to cards (only trigger if not dragging)
    cards.forEach((card, index) => {
      card.addEventListener("click", (e) => {
        // Only handle click if we didn't drag
        if (Math.abs(dragOffset) < 10 && index !== currentIndex) {
          updateSlider(index);
        }
      });
    });
  });
</script>
